/* Container: enable vertical scroll snapping */
.scroll-container {
    scroll-snap-type: y mandatory;
    overflow-y: auto;
    height: 100vh;
}

/* Hide navbar/footer wrappers initially */
#navbar, #footer {
    opacity: 0;
    transition: opacity 400ms ease;
}

/* Reveal wrappers */
#navbar.visible, #footer.visible {
    opacity: 1;
}

#footer {
    width: 100%;
    pointer-events: none; /* pointer-events only allowed when visible */
}

#footer .site-footer {
    position: fixed;
    left: 0;
    bottom: 0;
    width: 100vw;
    z-index: 20;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s;
    background: rgba(0,0,0,0.85); /* dark translucent background */
    color: #fff;
    text-align: center;
    padding: 1.5em 0;  /* set as you like */
    margin: 0;
    border-top: 2px solid var(--imdb-yellow);
    box-sizing: border-box;
}

#footer.visible .site-footer {
    opacity: 1;
    pointer-events: auto;
}


/* Section base styling */
.section {
    scroll-snap-align: start;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    box-sizing: border-box;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 600ms ease-out, transform 600ms ease-out;
}

/* Hero specific */
.hero {
    padding: 0;
    position: relative;
}

.hero .bg-video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
}

.hero .overlay {
    text-align: center;
    color: white;
    max-width: 800px;
    background: rgba(0, 0, 0, 0.4);
    padding: 1rem;
    border-radius: 8px;
}

/* Reveal state */
.section.visible {
    opacity: 1;
    transform: translateY(0);
}

/* Placeholders */
.chart-placeholder, .stat-placeholder {
    width: 300px;
    height: 200px;
    background: #222;
    color: #888;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 1rem 0;
    border-radius: 4px;
}

/* Synthesis cards */
.synthesis .cards {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
}

.synthesis .card {
    background: rgba(255, 255, 255, 0.1);
    padding: 1rem;
    border-radius: 6px;
    flex: 1 1 200px;
    text-align: center;
}

.media {
    width: 90vw; /* Or your desired width */
    max-width: 1200px;
    margin: 0 auto;
    /* You can set a height for the container if you want the chart to have a specific aspect ratio
       or a fixed height, and Chart.js will adapt. E.g.: */
    /* height: 500px; */ /* Or use padding-bottom for aspect ratio trick */
}

.media canvas {
    display: block;
    max-width: 100%; /* Allow it to be responsive within the container */
    /* Let Chart.js determine the width and height attributes based on the container
       and its responsive settings. Avoid setting width/height here with !important. */
    /* width: 100% !important;  <-- REMOVE or AVOID */
    /* height: 500px !important; <-- REMOVE or AVOID */
}

/* The fade-in animation is fine */
.media > canvas {
    opacity: 0;
    animation: fadein 0.8s forwards;
}
@keyframes fadein {
    to { opacity: 1; }
}
