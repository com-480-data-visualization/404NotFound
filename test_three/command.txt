http://localhost:5173/

npx vite



backup



import * as THREE from 'three';

class Sphere extends THREE.Mesh {
    constructor(size, material) {
        const geometry = new THREE.SphereGeometry(size, 32, 16);
        super(geometry, material);
        this.size = size;
        this.speed_x = 0;
        this.speed_y = 0;
    }

    addSpeed(dx, dy) {
        this.speed_x += dx;
        this.speed_y += dy;
    }

    updatePosition() {
        this.position.x += this.speed_x;
        this.position.y += this.speed_y;

        // Optional: add some friction
        this.speed_x *= 0.98;
        this.speed_y *= 0.98;
    }
}

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );

const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const geometry = new THREE.BoxGeometry( 1, 1, 1 );
const geometry2 = new THREE.SphereGeometry( 0.5, 32, 16 );

const material = new THREE.MeshPhongMaterial({
    color: 0xFF5060,    // red (can also use a CSS color string here)
    flatShading: false,
});
const material2 = new THREE.MeshPhongMaterial({
    color: 0xFF5050,    // red (can also use a CSS color string here)
    flatShading: false,
});

const list_color = [0x003F5C, 0x58508D, 0xBC5090, 0xFF6361, 0xFFA600]
const number_color = list_color.length
const materials = list_color.map(c => new THREE.MeshPhongMaterial({
    color: c,    // red (can also use a CSS color string here)
    flatShading: false,
}))


//[4, 5, 6, 0.2, 0.8, 0.5, 0.4, 0.6]
var sizes = [4, 5, 6, 1.4, 4.3,0.5, 1.6, 0.8,0.04, 0.03, 0.6, 0.2, 0.8, 0.5, 0.4, 0.6]//.sort( (a, b) => b - a);
sizes = sizes.map( size => Math.pow(size, 1/3)* 0.5)
const length = sizes.length


const spheres = sizes.map(size => {

    const random = Math.floor(Math.random()*number_color);

    return new Sphere(size, materials[random])
});


const cube = new THREE.Mesh( geometry, material );
const sphere = new THREE.Mesh( geometry2, material2 );


const directionalLight = new THREE.DirectionalLight( 0xffffff, 0.8 );
directionalLight.position.set( 0.2, 0.4, 0.8 );

//scene.add( sphere );
//scene.add( cube );
scene.add( directionalLight );

//scene.add( spheres[0] );
const radius_center = sizes[0]

let alpha = 0.2;
for (let i = 1; i < length; i++) {
    const r = radius_center + sizes[i]
    spheres[i].position.set(r*Math.cos(alpha), r*Math.sin(alpha), 0);
    alpha += 2*Math.PI / length
}
spheres.forEach(cube_a => {
    scene.add( cube_a );
})

camera.position.z = 5;




let frame = 0
function animate() {
    frame += 1;
    cube.rotation.x += 0.01;
    cube.rotation.y += 0.01;

    sphere.position.x = 2*Math.cos(frame/50)
    sphere.position.y = Math.sin(frame/50)

    push(spheres)

    renderer.render( scene, camera );
}
renderer.setAnimationLoop( animate );




function push(spheres) {
    const length = spheres.length;

    for (let i = 0; i < length; i++) {
        for (let j = i+1; j < length; j++) {

            const a = spheres[i];
            const b = spheres[j];

            const diff_x = b.position.x - a.position.x;
            const diff_y = b.position.y - a.position.y;

            // Force to go the center
            const gravity = 0.0001
            a.addSpeed(-a.position.x * gravity, -a.position.y * gravity);
            b.addSpeed(-b.position.x * gravity, -b.position.y * gravity);

            const distance = Math.sqrt(diff_x ** 2 + diff_y ** 2) - a.size - b.size;
            if (distance>0.1) continue;
            const direction = Math.atan2(diff_y, diff_x);

            const force = Math.exp(-distance) * 1e-3;

            const fx = Math.cos(direction) * force;
            const fy = Math.sin(direction) * force;


            const mass_a = Math.pow(a.size, 3);
            const mass_b = Math.pow(b.size, 3);
            a.addSpeed(-fx/mass_a, -fy/mass_a); // repelling force
            b.addSpeed(fx/mass_b, fy/mass_b);
        }
    }

    const randomForceIntensity = 0.001
    for (let i = 0; i < length; i++) {
        spheres[i].addSpeed((Math.random()-0.5)*randomForceIntensity, (Math.random()*-0.5)*randomForceIntensity)
        spheres[i].updatePosition();
    }
}


